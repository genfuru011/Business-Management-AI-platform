"use client"

import { useChat } from "@ai-sdk/react"
import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Settings, MessageSquare, Bot, User, Wifi, Download, Trash2, RefreshCw, Search } from "lucide-react"

interface OllamaModel {
  name: string
  description: string
  size: string
  tags: string[]
  official: boolean
  installed: boolean
  modified?: string | null
}

export default function LocalLLMChat() {
  const [customEndpoint, setCustomEndpoint] = useState("http://localhost:11434/v1")
  const [modelName, setModelName] = useState("llama3.2")
  const [showSettings, setShowSettings] = useState(false)
  const [showModelBrowser, setShowModelBrowser] = useState(false)

  // 接続テストの状態
  const [connectionStatus, setConnectionStatus] = useState<'idle' | 'testing' | 'success' | 'error'>('idle')
  const [connectionMessage, setConnectionMessage] = useState('')

  // モデル管理の状態
  const [availableModels, setAvailableModels] = useState<OllamaModel[]>([])
  const [loadingModels, setLoadingModels] = useState(false)
  const [modelFilter, setModelFilter] = useState('')
  const [downloadingModels, setDownloadingModels] = useState<Set<string>>(new Set())

  // ローカルストレージから設定を読み込み
  useEffect(() => {
    const savedEndpoint = localStorage.getItem('ollama-endpoint')
    const savedModel = localStorage.getItem('ollama-model')
    
    if (savedEndpoint) setCustomEndpoint(savedEndpoint)
    if (savedModel) setModelName(savedModel)
  }, [])

  // 設定変更時にローカルストレージに保存
  useEffect(() => {
    localStorage.setItem('ollama-endpoint', customEndpoint)
  }, [customEndpoint])

  useEffect(() => {
    localStorage.setItem('ollama-model', modelName)
  }, [modelName])

  // Ollama接続テスト
  const testOllamaConnection = async () => {
    setConnectionStatus('testing')
    try {
      const testEndpoint = customEndpoint.replace('/v1', '/api/tags')
      const response = await fetch('/api/test-connection', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ endpoint: testEndpoint })
      })
      const data = await response.json()
      
      if (data.success) {
        setConnectionStatus('success')
        setConnectionMessage(data.message)
      } else {
        setConnectionStatus('error')
        setConnectionMessage(data.error)
      }
    } catch (error) {
      setConnectionStatus('error')
      setConnectionMessage('接続テストに失敗しました')
    }
  }

  // 利用可能なモデル一覧を取得
  const fetchAvailableModels = async () => {
    setLoadingModels(true)
    try {
      const endpoint = customEndpoint.replace('/v1', '')
      const response = await fetch(`/api/ollama-models?endpoint=${encodeURIComponent(endpoint)}`)
      const data = await response.json()
      
      if (data.success) {
        setAvailableModels(data.models)
      } else {
        console.error('Failed to fetch models:', data.error)
      }
    } catch (error) {
      console.error('Error fetching models:', error)
    } finally {
      setLoadingModels(false)
    }
  }

  // モデルのダウンロード
  const downloadModel = async (modelName: string) => {
    setDownloadingModels(prev => new Set([...prev, modelName]))
    try {
      const response = await fetch('/api/ollama-manage', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          endpoint: customEndpoint,
          modelName,
          action: 'pull'
        })
      })
      const data = await response.json()
      
      if (data.success) {
        // モデル一覧を更新
        setTimeout(() => {
          fetchAvailableModels()
        }, 2000)
      } else {
        console.error('Failed to download model:', data.error)
      }
    } catch (error) {
      console.error('Error downloading model:', error)
    } finally {
      setDownloadingModels(prev => {
        const newSet = new Set(prev)
        newSet.delete(modelName)
        return newSet
      })
    }
  }

  // モデルの削除
  const deleteModel = async (modelName: string) => {
    try {
      const response = await fetch('/api/ollama-manage', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          endpoint: customEndpoint,
          modelName,
          action: 'delete'
        })
      })
      const data = await response.json()
      
      if (data.success) {
        fetchAvailableModels()
      } else {
        console.error('Failed to delete model:', data.error)
      }
    } catch (error) {
      console.error('Error deleting model:', error)
    }
  }

  // フィルタリングされたモデル一覧
  const filteredModels = availableModels.filter(model =>
    model.name.toLowerCase().includes(modelFilter.toLowerCase()) ||
    model.description.toLowerCase().includes(modelFilter.toLowerCase()) ||
    model.tags.some(tag => tag.toLowerCase().includes(modelFilter.toLowerCase()))
  )

  const { messages, input, handleInputChange, handleSubmit, isLoading, error } = useChat({
    api: "/api/chat",
    body: {
      endpoint: customEndpoint,
      modelName: modelName,
    },
    onError: (error) => {
      console.error("Chat error:", error)
    },
  })

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 p-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-blue-600 rounded-lg">
              <MessageSquare className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-slate-800">Local LLM Chat</h1>
              <p className="text-slate-600">Ollamaとの対話</p>
            </div>
          </div>
          <div className="flex gap-2">
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => {
                setShowModelBrowser(!showModelBrowser)
                if (!showModelBrowser) {
                  fetchAvailableModels()
                }
              }}
            >
              <Download className="w-4 h-4 mr-2" />
              モデル管理
            </Button>
            <Button variant="outline" size="sm" onClick={() => setShowSettings(!showSettings)}>
              <Settings className="w-4 h-4 mr-2" />
              設定
            </Button>
          </div>
        </div>

        {/* Settings Panel */}
        {showSettings && (
          <Card className="mb-6">
            <CardHeader>
              <CardTitle className="text-lg">Ollama設定</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <label className="text-sm font-medium">Ollamaエンドポイント</label>
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      onClick={testOllamaConnection}
                      disabled={connectionStatus === 'testing'}
                    >
                      <Wifi className={`w-4 h-4 ${
                        connectionStatus === 'testing' ? 'animate-pulse' : 
                        connectionStatus === 'success' ? 'text-green-600' : 
                        connectionStatus === 'error' ? 'text-red-600' : ''
                      }`} />
                    </Button>
                  </div>
                  <Input
                    value={customEndpoint}
                    onChange={(e) => setCustomEndpoint(e.target.value)}
                    placeholder="http://localhost:11434/v1"
                  />
                  {connectionMessage && (
                    <p className={`text-xs mt-1 ${
                      connectionStatus === 'success' ? 'text-green-600' : 'text-red-600'
                    }`}>
                      {connectionMessage}
                    </p>
                  )}
                </div>
                <div>
                  <label className="text-sm font-medium">モデル名</label>
                  <Input 
                    value={modelName} 
                    onChange={(e) => setModelName(e.target.value)} 
                    placeholder="llama3.2"
                    className="mt-2"
                  />
                  <p className="text-xs text-slate-500 mt-1">
                    使用するOllamaモデルの名前を入力してください
                  </p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Badge variant="secondary">
                  Ollama - {modelName}
                </Badge>
                <Badge variant="outline">{customEndpoint}</Badge>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Model Browser Panel */}
        {showModelBrowser && (
          <Card className="mb-6">
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="text-lg">Ollamaモデル管理</CardTitle>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  onClick={fetchAvailableModels}
                  disabled={loadingModels}
                >
                  <RefreshCw className={`w-4 h-4 ${loadingModels ? 'animate-spin' : ''}`} />
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Search Filter */}
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400" />
                <Input
                  placeholder="モデルを検索..."
                  value={modelFilter}
                  onChange={(e) => setModelFilter(e.target.value)}
                  className="pl-10"
                />
              </div>

              {/* Model List */}
              <div className="space-y-3 max-h-96 overflow-y-auto">
                {loadingModels ? (
                  <div className="text-center py-8 text-slate-500">
                    <RefreshCw className="w-6 h-6 animate-spin mx-auto mb-2" />
                    モデル一覧を読み込み中...
                  </div>
                ) : filteredModels.length === 0 ? (
                  <div className="text-center py-8 text-slate-500">
                    {modelFilter ? '検索条件に一致するモデルが見つかりません' : 'モデルが見つかりません'}
                  </div>
                ) : (
                  filteredModels.map((model) => (
                    <div
                      key={model.name}
                      className="flex items-center justify-between p-4 border rounded-lg hover:bg-slate-50"
                    >
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <h3 className="font-medium">{model.name}</h3>
                          {model.installed && (
                            <Badge variant="secondary" className="text-xs">
                              インストール済み
                            </Badge>
                          )}
                          {model.official && (
                            <Badge variant="outline" className="text-xs">
                              公式
                            </Badge>
                          )}
                        </div>
                        <p className="text-sm text-slate-600 mb-2">{model.description}</p>
                        <div className="flex items-center gap-2">
                          <Badge variant="outline" className="text-xs">
                            {model.size}
                          </Badge>
                          {model.tags.map((tag) => (
                            <Badge key={tag} variant="secondary" className="text-xs">
                              {tag}
                            </Badge>
                          ))}
                        </div>
                      </div>
                      <div className="flex items-center gap-2 ml-4">
                        {model.installed ? (
                          <>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => setModelName(model.name)}
                              className="text-blue-600 hover:text-blue-700"
                            >
                              使用
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => deleteModel(model.name)}
                              className="text-red-600 hover:text-red-700"
                            >
                              <Trash2 className="w-4 h-4" />
                            </Button>
                          </>
                        ) : (
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => downloadModel(model.name)}
                            disabled={downloadingModels.has(model.name)}
                          >
                            {downloadingModels.has(model.name) ? (
                              <>
                                <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                                ダウンロード中...
                              </>
                            ) : (
                              <>
                                <Download className="w-4 h-4 mr-2" />
                                ダウンロード
                              </>
                            )}
                          </Button>
                        )}
                      </div>
                    </div>
                  ))
                )}
              </div>
            </CardContent>

        {/* Chat Interface */}
        <Card className="h-[600px] flex flex-col">
          <CardHeader className="border-b">
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center gap-2">
                <Bot className="w-5 h-5" />
                チャット
                <Badge variant="outline" className="ml-2 text-xs">
                  {modelName}
                </Badge>
              </CardTitle>
              <Badge variant={isLoading ? "destructive" : "secondary"}>
                {isLoading ? "応答中..." : "待機中"}
              </Badge>
            </div>
          </CardHeader>

          <CardContent className="flex-1 overflow-y-auto p-4 space-y-4">
            {error && (
              <div className="text-center text-red-500 bg-red-50 p-4 rounded-lg">
                <p>エラーが発生しました: {error.message}</p>
              </div>
            )}

            {messages.length === 0 && !error && (
              <div className="text-center text-slate-500 mt-8">
                <Bot className="w-12 h-12 mx-auto mb-4 text-slate-400" />
                <p>Ollamaとの対話を開始してください</p>
                <p className="text-sm mt-2">設定でOllamaサーバーの接続情報を確認してください</p>
                <p className="text-xs mt-1 text-blue-600">
                  モデル名: {modelName}
                </p>
              </div>
            )}

            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex gap-3 ${message.role === "user" ? "justify-end" : "justify-start"}`}
              >
                <div className={`flex gap-3 max-w-[80%] ${message.role === "user" ? "flex-row-reverse" : "flex-row"}`}>
                  <div
                    className={`w-8 h-8 rounded-full flex items-center justify-center ${
                      message.role === "user" ? "bg-blue-600 text-white" : "bg-slate-200 text-slate-600"
                    }`}
                  >
                    {message.role === "user" ? <User className="w-4 h-4" /> : <Bot className="w-4 h-4" />}
                  </div>
                  <div
                    className={`rounded-lg px-4 py-2 ${
                      message.role === "user"
                        ? "bg-blue-600 text-white"
                        : "bg-white border border-slate-200 text-slate-800"
                    }`}
                  >
                    <div className="whitespace-pre-wrap">
                      {message.content}
                    </div>
                  </div>
                </div>
              </div>
            ))}

            {isLoading && (
              <div className="flex gap-3 justify-start">
                <div className="w-8 h-8 rounded-full bg-slate-200 flex items-center justify-center">
                  <Bot className="w-4 h-4 text-slate-600" />
                </div>
                <div className="bg-white border border-slate-200 rounded-lg px-4 py-2">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce"></div>
                    <div
                      className="w-2 h-2 bg-slate-400 rounded-full animate-bounce"
                      style={{ animationDelay: "0.1s" }}
                    ></div>
                    <div
                      className="w-2 h-2 bg-slate-400 rounded-full animate-bounce"
                      style={{ animationDelay: "0.2s" }}
                    ></div>
                  </div>
                </div>
              </div>
            )}
          </CardContent>

          <CardFooter className="border-t p-4">
            <form onSubmit={handleSubmit} className="flex w-full gap-2">
              <Input
                value={input}
                onChange={handleInputChange}
                placeholder="メッセージを入力してください..."
                className="flex-1"
                disabled={isLoading}
              />
              <Button type="submit" disabled={isLoading || !input.trim()}>
                送信
              </Button>
            </form>
          </CardFooter>
        </Card>
      </div>
    </div>
  )
}

