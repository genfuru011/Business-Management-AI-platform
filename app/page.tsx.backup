"use client"

import { useChat } from "@ai-sdk/react"
import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Settings, MessageSquare, Bot, User, RefreshCw, Wifi, Search, Download, Package } from "lucide-react"

interface OllamaModel {
  name: string
  size: number
  modified_at: string
  digest: string
}

interface LibraryModel {
  name: string
  description: string
  tags: string[]
  pulls: number
  updated_at: string
}

export default function LocalLLMChat() {
  const [selectedModel, setSelectedModel] = useState("ollama")
  const [customEndpoint, setCustomEndpoint] = useState("http://localhost:11434/v1")
  const [modelName, setModelName] = useState("llama3.2")
  const [showSettings, setShowSettings] = useState(false)
  const [availableModels, setAvailableModels] = useState<OllamaModel[]>([])
  const [isLoadingModels, setIsLoadingModels] = useState(false)
  const [showModelBrowser, setShowModelBrowser] = useState(false)
  const [libraryModels, setLibraryModels] = useState<LibraryModel[]>([])
  const [searchQuery, setSearchQuery] = useState("")
  const [isSearching, setIsSearching] = useState(false)
  const [downloadingModels, setDownloadingModels] = useState<Set<string>>(new Set())

  // 接続テストの状態
  const [connectionStatus, setConnectionStatus] = useState<'idle' | 'testing' | 'success' | 'error'>('idle')
  const [connectionMessage, setConnectionMessage] = useState('')

  // ローカルストレージから設定を読み込み
  useEffect(() => {
    const savedEndpoint = localStorage.getItem('ollama-endpoint')
    const savedModel = localStorage.getItem('ollama-model')
    
    if (savedEndpoint) setCustomEndpoint(savedEndpoint)
    if (savedModel) setModelName(savedModel)
  }, [])

  // 設定変更時にローカルストレージに保存
  useEffect(() => {
    localStorage.setItem('ollama-endpoint', customEndpoint)
  }, [customEndpoint])

  useEffect(() => {
    localStorage.setItem('ollama-model', modelName)
  }, [modelName])

  const { messages, input, handleInputChange, handleSubmit, isLoading, error } = useChat({
    api: "/api/chat",
    body: {
      endpoint: customEndpoint,
      modelName: modelName,
    },
    onError: (error) => {
      console.error("Chat error:", error)
    },
    onFinish: (message) => {
      console.log("Chat finished:", message)
    },
    onResponse: (response) => {
      console.log("Response received:", response.status, response.headers)
    },
  })

  // Ollamaモデル一覧を取得
  const fetchOllamaModels = async () => {
    setIsLoadingModels(true)
    try {
      const response = await fetch("/api/ollama-models")
      const data = await response.json()
      if (data.success) {
        setAvailableModels(data.models)
      }
    } catch (error) {
      console.error("Failed to fetch Ollama models:", error)
    } finally {
      setIsLoadingModels(false)
    }
  }

  // Ollamaライブラリからモデルを検索
  const searchLibraryModels = async (query: string = "") => {
    setIsSearching(true)
    try {
      const response = await fetch(`/api/ollama-library?q=${encodeURIComponent(query)}&limit=50`)
      const data = await response.json()
      if (data.success) {
        setLibraryModels(data.models)
      }
    } catch (error) {
      console.error("Failed to search library models:", error)
    } finally {
      setIsSearching(false)
    }
  }

  // モデルをダウンロード
  const downloadModel = async (modelName: string) => {
    setDownloadingModels(prev => new Set(prev).add(modelName))
    try {
      const response = await fetch('/api/ollama-pull', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ modelName })
      })
      const data = await response.json()
      
      if (data.success) {
        // ダウンロード成功後、ローカルモデル一覧を更新
        setTimeout(() => {
          fetchOllamaModels()
        }, 2000)
      }
    } catch (error) {
      console.error("Failed to download model:", error)
    } finally {
      setDownloadingModels(prev => {
        const newSet = new Set(prev)
        newSet.delete(modelName)
        return newSet
      })
    }
  }

  // 初回ロード時にモデル一覧を取得
  useEffect(() => {
    fetchOllamaModels()
  }, [])

  // 初回ロード時にライブラリモデルも検索
  useEffect(() => {
    searchLibraryModels()
  }, [])

  // ファイルサイズをフォーマットする関数
  const formatBytes = (bytes: number) => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  // 推奨モデルのリスト
  const recommendedModels = [
    'llama3.2:latest',
    'llama3.2:1b',
    'gemma2:2b',
    'phi3:mini',
    'qwen2:0.5b'
  ]

  // Ollama接続テスト
  const testOllamaConnection = async () => {
    setConnectionStatus('testing')
    try {
      const testEndpoint = customEndpoint.replace('/v1', '/api/tags')
      const response = await fetch('/api/test-connection', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ endpoint: testEndpoint })
      })
      const data = await response.json()
      
      if (data.success) {
        setConnectionStatus('success')
        setConnectionMessage(data.message)
        // 接続成功時にモデル一覧も更新
        fetchOllamaModels()
      } else {
        setConnectionStatus('error')
        setConnectionMessage(data.error)
      }
    } catch (error) {
      setConnectionStatus('error')
      setConnectionMessage('接続テストに失敗しました')
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 p-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-blue-600 rounded-lg">
              <MessageSquare className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-slate-800">Local LLM Chat</h1>
              <p className="text-slate-600">Ollamaとの対話</p>
            </div>
          </div>
          <Button variant="outline" size="sm" onClick={() => setShowSettings(!showSettings)}>
            <Settings className="w-4 h-4 mr-2" />
            設定
          </Button>
        </div>

        {/* Settings Panel */}
        {showSettings && (
          <Card className="mb-6">
            <CardHeader>
              <CardTitle className="text-lg">Ollama設定</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <label className="text-sm font-medium">Ollamaエンドポイント</label>
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      onClick={testOllamaConnection}
                      disabled={connectionStatus === 'testing'}
                    >
                      <Wifi className={`w-4 h-4 ${
                        connectionStatus === 'testing' ? 'animate-pulse' : 
                        connectionStatus === 'success' ? 'text-green-600' : 
                        connectionStatus === 'error' ? 'text-red-600' : ''
                      }`} />
                    </Button>
                  </div>
                  <Input
                    value={customEndpoint}
                    onChange={(e) => setCustomEndpoint(e.target.value)}
                    placeholder="http://localhost:11434/v1"
                  />
                  {connectionMessage && (
                    <p className={`text-xs mt-1 ${
                      connectionStatus === 'success' ? 'text-green-600' : 'text-red-600'
                    }`}>
                      {connectionMessage}
                    </p>
                  )}
                </div>
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <label className="text-sm font-medium">モデル選択</label>
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      onClick={fetchOllamaModels}
                      disabled={isLoadingModels}
                    >
                      <RefreshCw className={`w-4 h-4 ${isLoadingModels ? 'animate-spin' : ''}`} />
                    </Button>
                  </div>
                  {availableModels.length > 0 ? (
                    <Select value={modelName} onValueChange={setModelName}>
                      <SelectTrigger>
                        <SelectValue placeholder="モデルを選択してください" />
                      </SelectTrigger>
                      <SelectContent>
                        {availableModels.map((model) => (
                          <SelectItem key={model.name} value={model.name}>
                            <div className="flex items-center justify-between w-full">
                              <span>{model.name}</span>
                              <div className="flex items-center gap-2 ml-4">
                                <span className="text-xs text-slate-500">
                                  {formatBytes(model.size)}
                                </span>
                                {recommendedModels.includes(model.name) && (
                                  <span className="text-xs bg-green-100 text-green-700 px-1 rounded">
                                    推奨
                                  </span>
                                )}
                              </div>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <div className="space-y-2">
                      <Input 
                        value={modelName} 
   